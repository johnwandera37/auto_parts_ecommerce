// I reached the folllowing part, enforce at the schema level that a user can have only one ACTIVE cart at a time, or leave that rule to your business logic
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CHECKED_OUT
}

// =================================
// USER / ACCOUNT RELATED MODELS
// =================================
model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String
  firstName        String
  lastName         String
  role             Role     @default(USER)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  // ✅ Consent / Legal
  acceptedTerms    Boolean  @default(false) // must be true to register
  marketingConsent Boolean  @default(false) // opt-in for promos, must be in sync with email provider

  // ✅ Social login
  googleId    String? @unique
  googleEmail String? @unique

  // Relations
  orders   Order[]
  wishlist Wishlist[]
  vehicles Vehicle[]

  // User can have zero or one of the following
  cart         Cart?
  verification Verification?
  settings     UserSettings?
  // Extendable Profiles
  adminProfile AdminProfile?
}

model UserSettings {
  id       String  @id @default(cuid())
  userId   String  @unique
  theme    String?
  language String?
  currency String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {year
  id            String   @id @default(cuid())
  userId        String   @unique
  otp           String
  attempts      Int      @default(0) // Track failed attempts
  emailVerified Boolean  @default(false)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Add index for faster OTP lookups instead of unique constraint
  @@index([otp])
}

// Admins get extra profile info
model AdminProfile {
  id                    String  @id @default(cuid())
  userId                String  @unique
  hasUpdatedCredentials Boolean @default(false)
  level                 Int     @default(100) // convention: 100=Super Admin, 50=Admin, 20=Manager, 10=Editor, 1=Support

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =================================
// E-COMMERCE CORE MODELS
// =================================
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  orderItems    OrderItem[]
  cartItems     CartItem[]
  wishlists     Wishlist[]
  compatibility Compatibility[]
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Compatibility {
  id        String @id @default(cuid())
  productId String
  vehicleId String

  product Product @relation(fields: [productId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

model Vehicle {
  id    String @id @default(cuid())
  make  String
  model String
  year  Int

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  compatibility Compatibility[]
}

// Orders
model Order {
  id        String   @id @default(cuid())
  userId    String
  cartId    String // Ensures one cart -> one order scaler field
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  cart  Cart        @relation(fields: [cartId], references: [id]) // established the same cart link here
  items OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// Cart (one per user)
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique // ✅ one cart per user enforced here scaler field
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
  order Order[] // reverse relation linking cart to order, one cart, many orders
}

// Items inside cart
model CartItem {
  id        String @id @default(cuid())
  cartId    String
  productId String
  quantity  Int    @default(1)

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

// Wishlist
model Wishlist {
  id        String @id @default(cuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

// =================================
// OTHER MODELS
// =================================
model Deal {
  id          String   @id @default(cuid())
  title       String
  description String?
  discount    Float
  startDate   DateTime
  endDate     DateTime
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
